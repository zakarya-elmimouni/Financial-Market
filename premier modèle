import numpy as np
import random
import matplotlib.pyplot as plt

# Définition des paramètres

delta = 0.95
b_0 = 1
N = 500
nu=0.9
durée=500

class Graphe:

    def __init__(self, agents=[], b_0=b_0, delta=delta):
        self.agents = agents
        self.graphe = dict([( i, [[],[], b_0] ) for i in agents]) 
        #self.graphe a la structure suivante:
        # {i:[[liste des agents j auquels i a prêté :  i --> j],
        #     [liste des agents j qui ont prêté à i : i <-- j ],
        #     Le montant cash que possède i : b0]}
        self.nb_agents = len(agents)
        l , b = 0 , 0
        for i in self.agents:
            l = l + len(self.graphe[i][1])
            b = b + len(self.graphe[i][0]) + self.graphe[i][2]
        self.liabilities = l 
        self.assets = b

    def ajout_relation(self, i, j): # i prête à j   
        self.graphe[i][0].append(j) # j devient un emprunteur de i
        self.graphe[j][1].append(i) # i devient un prêteur de i 
        self.graphe[i][2] = self.graphe[i][2] - delta 
        self.graphe[j][2] = self.graphe[j][2] + delta

    def invest_reussi(self, i, j): # Le prêt donné par i à j arrive à maturité
        self.graphe[i][0].remove(j) # j n'est plus un emprunteur de i
        self.graphe[j][1].remove(i) # i n'est plus un prêteur de i 
        self.graphe[i][2] = self.graphe[i][2] + 1 # Le prêt est remboursé
        self.graphe[j][2] = self.graphe[j][2] -1

    def foreclose(self, i , j): # i décide de foreclose le prêt qu'il a donné à j 
        self.graphe[i][0].remove(j) # j n'est plus un emprunteur de i
        self.graphe[j][1].remove(i) # i n'est plus un prêteur de i


def aretes(G):
    """Retourne la liste des arêtes d'un graphe G """
    aretes=[]
    for agent in G.graphe.keys():
        for voisin in G.graphe[agent][0]:
            if (agent,voisin) not in aretes:
                aretes.append((agent,voisin))
    return  aretes

def initial_aleat(N, b_0, delta):
    """ Génère un graphe aléatoire avec N agents possédant initialement b_0.
    Les prêts sont d'un montant nominal delta"""
    agents = [i for i in range(N)]
    G = Graphe(agents, b_0, delta)
    for i in agents:
        J = random.randint(1,N) # J est le nombre des agents j auquels i va prêter : i --> j
        k=random.random()
        for j in random.choices(agents, k=J): 
            if j==i:
                continue
            else:
                if G.graphe[i][2] >= delta: # i doit avoir au moins delta pour pouvoir prêter
                    G.ajout_relation(i,j)
    return G

def dynamique (G, c, gamma,lamda,nu,durée):
    t=0
    temps=[]
    liste_de_connectivité=[]
    while t<=durée:
        liste_de_connectivité.append(len(aretes(G)))
        temps.append(t)
        t=t+1 

        for i in G.agents:

            # Ajout des arrêtes
            k=random.random()
            p = random.random() # p est nombre aléatoire entre 0 et 1
            j = random.randint(0,len(G.agents)-1) # j est un agent aléatoire du graphe

            if j != i :
                if p < gamma: 
                    # Une relation s'ajoute avec un taux gamma 
                    # et donc avec une probabilité gamma*dt.
                    # Ici dt=1
                    if (k>0.5) and (j not in G.graphe[i][1]) and (G.graphe[j][2]>=delta):
                        G.ajout_relation (j,i)
                    # j n'a pas déjà prêté à i et est capable de le faire
                    elif (k<0.5) and (j not in G.graphe[i][0]) and (G.graphe[i][2]>=delta):
                        G.ajout_relation (i,j)
                    # i n'a pas déjà prêté à j et est capable de le faire
                    else:
                        continue

            # Suppression des arêtes 
            r=random.random() 
            r2=random.random() 
            if (G.graphe[i][0]!=[]) and (G.graphe[i][1]!=[]) :
                d1 = random.randint(0,len(G.graphe[i][0])-1)
                d2 = random.randint(0,len(G.graphe[i][1])-1)
                j1 = G.graphe[i][0][d1] # j1 est un emrunteur aléatoire de i
                j2 = G.graphe[i][1][d2] # j2 est un prêteur aléatoire de i

                if (r<lamda) and (G.graphe[j1][1]!=[]) and (G.graphe[j2][0]!=[]):
                    if (r2>0.5) and (i in G.graphe[j1][1]) and (j1 in G.graphe[i][0] ):
                        G.invest_reussi(i,j1)
                    elif (r2<0.5) and (i in G.graphe[j2][0]) and (j2 in G.graphe[i][1]):
                        G.invest_reussi(j2,i)

            # Divulgation de l'information  
            u = random.random()
            if u < nu:
                c_etoile= ( len(G.graphe[i][0]) + G.graphe[i][2] + 1 ) / ( len(G.graphe[i][1]) + 1 ) 
                if (c > c_etoile) and ( G.graphe[i][1]!=[]):
                    for j in G.graphe[i][1]:
                        if ( i in G.graphe[j][0]):
                            G.foreclose(j,i)
                G.graphe[i]=[[],[],G.graphe[i][2]]
            else:
                continue
    return G.graphe,liste_de_connectivité,temps
#les parametres gamma et lamda sont à mettre pour chaque figure
nu=0.05
gamma=0.9
lamda=0.02
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G,c,gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
liste_des_C=np.linspace(0,1,101)
#liste_connectivité2=[dynamique (G, c, gamma,lamda,nu,durée)[3]for c in liste_des_C]

#figure 7
plt.plot(temps,liste_de_conectivité)
plt.ylabel('nombre de relation')
plt.xlabel('temps')
plt.title('variation de la densité du graphe en fonction du temps (nu=0.05 ,gamma=0.9,lambda=0.02)')
plt.show()

nu=0.9 
gamma=0.9
lamda=0.02
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G,c,gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
liste_des_C=np.linspace(0,1,101)
#figure 6
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G, c, gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
plt.plot(temps,liste_de_conectivité)
plt.ylabel('nombre de relation')
plt.xlabel('temps')
plt.title('variation de la densité du graphe en fonction du temps (nu=0.9 ,gamma=0.9,lambda=0.02)')
plt.show()

nu=0.4
gamma=0.01
lamda=0.5
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G,c,gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
liste_des_C=np.linspace(0,1,101)
#figure 5
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G, c, gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
plt.plot(temps,liste_de_conectivité)
plt.ylabel('nombre de relation')
plt.xlabel('temps')
plt.title('variation de la densité du graphe en fonction du temps (nu=0.4 ,gamma=0.01,lambda=0.5)')
plt.show()

nu=0.4
gamma=0.01
lamda=0.5
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G,c,gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
liste_des_C=np.linspace(0,1,101)
# Figure 4 
lamda=0.001
C=np.linspace(0,1,50) 
for gamma in [0.0001, 0.001, 0.01, 0.1, 0.5, 0.9 ]:
    L=[]
    for c in C:
        G=initial_aleat(N, b_0, delta)
        liste_de_conectivité=dynamique (G, c, gamma,lamda,nu,durée)[1]
        temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
        L2=liste_de_conectivité[9*len(liste_de_conectivité)//10:]
        rho=(sum(L2)/len(L2)) / N
        L.append(rho)
    plt.xlabel('c') 
    plt.ylabel('La densité du graphe') 
    plt.title("La variation de la densité du graphe en fonction de c")
    plt.plot(C,L, label='gamma='+str(gamma))
plt.legend(loc="upper left")
plt.show()

nu=0.5
gamma=0.5
lamda=0.8
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G,c,gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
liste_des_C=np.linspace(0,1,101)
#figure 3
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G, c, gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
durée=100
liste_des_C=np.linspace(0,1,101)
plt.plot(liste_des_C,liste_de_conectivité)
plt.ylabel('density')
plt.xlabel('c')
plt.title('variation de la densité du graphe en fonction de c (nu=0.4 ,gamma=0.5,lambda=0.8)')
plt.show()

nu=0.4
gamma=0.5
lamda=0.01
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G,c,gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
liste_des_C=np.linspace(0,1,101)
#figure 2
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G, c, gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
durée=100
liste_des_C=np.linspace(0.3,0.7,101)
plt.plot(liste_des_C,liste_de_conectivité)
plt.ylabel('nombre de relation')
plt.xlabel('c')
plt.title('variation du nombre de relation du graphe en fonction de c (nu=0.4 ,gamma=0.5,lambda=0.01)')
plt.show()

nu=0.5
gamma=0.5
lamda=0.5
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G,c,gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
liste_des_C=np.linspace(0,1,101)
#figure 1
G=initial_aleat(N, b_0, delta)
liste_de_conectivité=dynamique (G, c, gamma,lamda,nu,durée)[1]
temps=dynamique (G, c, gamma,lamda,nu,durée)[2]
durée=100
liste_des_C=np.linspace(0,1,101)
plt.plot(liste_des_C,liste_de_conectivité)
plt.ylabel('nombre de relation')
plt.xlabel('c')
plt.title('variation de la densité du graphe en fonction de c (nu=0.5,gamma=0.5,lambda=0.5)')
plt.show()












